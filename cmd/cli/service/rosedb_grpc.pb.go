// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/rosedb.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RosedbClient is the client API for Rosedb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RosedbClient interface {
	// ******************** cmd_set ****************
	SAdd(ctx context.Context, in *SAddReq, opts ...grpc.CallOption) (*SAddRsp, error)
	SPop(ctx context.Context, in *SPopReq, opts ...grpc.CallOption) (*SPopRsp, error)
	SIsMember(ctx context.Context, in *SIsMemberReq, opts ...grpc.CallOption) (*SIsMemberRsp, error)
	SRandMember(ctx context.Context, in *SRandMemberReq, opts ...grpc.CallOption) (*SRandMemberRsp, error)
	SRem(ctx context.Context, in *SRemReq, opts ...grpc.CallOption) (*SRemRsp, error)
	SMove(ctx context.Context, in *SMoveReq, opts ...grpc.CallOption) (*SMoveRsp, error)
	SCard(ctx context.Context, in *SCardReq, opts ...grpc.CallOption) (*SCardRsp, error)
	SMembers(ctx context.Context, in *SMembersReq, opts ...grpc.CallOption) (*SMembersRsp, error)
	SDiff(ctx context.Context, in *SDiffReq, opts ...grpc.CallOption) (*SDiffRsp, error)
	SKeyExists(ctx context.Context, in *SKeyExistsReq, opts ...grpc.CallOption) (*SKeyExistsRsp, error)
	SClear(ctx context.Context, in *SClearReq, opts ...grpc.CallOption) (*SClearRsp, error)
	SExpire(ctx context.Context, in *SExpireReq, opts ...grpc.CallOption) (*SExpireRsp, error)
	STTL(ctx context.Context, in *STTLReq, opts ...grpc.CallOption) (*STTLRsp, error)
	// ******************** cmd_hash ****************
	HSet(ctx context.Context, in *HSetReq, opts ...grpc.CallOption) (*HSetRsp, error)
	HSetNx(ctx context.Context, in *HSetNxReq, opts ...grpc.CallOption) (*HSetNxRsp, error)
	HGet(ctx context.Context, in *HGetReq, opts ...grpc.CallOption) (*HGetRsp, error)
	HGetAll(ctx context.Context, in *HGetAllReq, opts ...grpc.CallOption) (*HGetAllRsp, error)
	HMSet(ctx context.Context, in *HMSetReq, opts ...grpc.CallOption) (*HMSetRsp, error)
	HMGet(ctx context.Context, in *HMGetReq, opts ...grpc.CallOption) (*HMGetRsp, error)
	HDel(ctx context.Context, in *HDelReq, opts ...grpc.CallOption) (*HDelRsp, error)
	HKeyExists(ctx context.Context, in *HKeyExistsReq, opts ...grpc.CallOption) (*HKeyExistsRsp, error)
	HExists(ctx context.Context, in *HExistsReq, opts ...grpc.CallOption) (*HExistsRsp, error)
	HLen(ctx context.Context, in *HLenReq, opts ...grpc.CallOption) (*HLenRsp, error)
	HVals(ctx context.Context, in *HValsReq, opts ...grpc.CallOption) (*HValsRsp, error)
	HKeys(ctx context.Context, in *HKeysReq, opts ...grpc.CallOption) (*HKeysRsp, error)
	HClear(ctx context.Context, in *HClearReq, opts ...grpc.CallOption) (*HClearRsp, error)
	HExpire(ctx context.Context, in *HExpireReq, opts ...grpc.CallOption) (*HExpireRsp, error)
	HTTL(ctx context.Context, in *HTTLReq, opts ...grpc.CallOption) (*HTTLRsp, error)
	// ******************** cmd_list ****************
	LPush(ctx context.Context, in *LPushReq, opts ...grpc.CallOption) (*LPushRsp, error)
	RPush(ctx context.Context, in *RPushReq, opts ...grpc.CallOption) (*RPushRsp, error)
	LPop(ctx context.Context, in *LPopReq, opts ...grpc.CallOption) (*LPopRsp, error)
	RPop(ctx context.Context, in *RPopReq, opts ...grpc.CallOption) (*RPopRsp, error)
	LIndex(ctx context.Context, in *LIndexReq, opts ...grpc.CallOption) (*LIndexRsp, error)
	LRem(ctx context.Context, in *LRemReq, opts ...grpc.CallOption) (*LRemRsp, error)
	LInsert(ctx context.Context, in *LInsertReq, opts ...grpc.CallOption) (*LInsertRsp, error)
	LSet(ctx context.Context, in *LSetReq, opts ...grpc.CallOption) (*LSetRsp, error)
	LTrim(ctx context.Context, in *LTrimReq, opts ...grpc.CallOption) (*LTrimRsp, error)
	LRange(ctx context.Context, in *LRangeReq, opts ...grpc.CallOption) (*LRangeRsp, error)
	LLen(ctx context.Context, in *LLenReq, opts ...grpc.CallOption) (*LLenRsp, error)
	LKeyExists(ctx context.Context, in *LKeyExistsReq, opts ...grpc.CallOption) (*LKeyExistsRsp, error)
	LValExists(ctx context.Context, in *LValExistsReq, opts ...grpc.CallOption) (*LValExistsRsp, error)
	LClear(ctx context.Context, in *LClearReq, opts ...grpc.CallOption) (*LClearRsp, error)
	LExpire(ctx context.Context, in *LExpireReq, opts ...grpc.CallOption) (*LExpireRsp, error)
	LTTL(ctx context.Context, in *LTTLReq, opts ...grpc.CallOption) (*LTTLRsp, error)
	// ******************** cmd_str ****************
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRsp, error)
	SetNx(ctx context.Context, in *SetNxReq, opts ...grpc.CallOption) (*SetNxRsp, error)
	SetEx(ctx context.Context, in *SetExReq, opts ...grpc.CallOption) (*SetExRsp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	GetSet(ctx context.Context, in *GetSetReq, opts ...grpc.CallOption) (*GetSetRsp, error)
	MSet(ctx context.Context, in *MSetReq, opts ...grpc.CallOption) (*MSetRsp, error)
	MGet(ctx context.Context, in *MGetReq, opts ...grpc.CallOption) (*MGetRsp, error)
	Append(ctx context.Context, in *AppendReq, opts ...grpc.CallOption) (*AppendRsp, error)
	StrExists(ctx context.Context, in *StrExistsReq, opts ...grpc.CallOption) (*StrExistsRsp, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveRsp, error)
	PrefixScan(ctx context.Context, in *PrefixScanReq, opts ...grpc.CallOption) (*PrefixScanRsp, error)
	RangeScan(ctx context.Context, in *RangeScanReq, opts ...grpc.CallOption) (*RangeScanRsp, error)
	Expire(ctx context.Context, in *ExpireReq, opts ...grpc.CallOption) (*ExpireRsp, error)
	Persist(ctx context.Context, in *PersistReq, opts ...grpc.CallOption) (*PersistRsp, error)
	TTl(ctx context.Context, in *TTLReq, opts ...grpc.CallOption) (*TTLRsp, error)
	// ******************** cmd_zset ****************
	ZAdd(ctx context.Context, in *ZAddReq, opts ...grpc.CallOption) (*ZAddRsp, error)
	ZScore(ctx context.Context, in *ZScoreReq, opts ...grpc.CallOption) (*ZScoreRsp, error)
	ZRank(ctx context.Context, in *ZRankReq, opts ...grpc.CallOption) (*ZRankRsp, error)
	ZCard(ctx context.Context, in *ZCardReq, opts ...grpc.CallOption) (*ZCardRsp, error)
	ZRevRank(ctx context.Context, in *ZRevRankReq, opts ...grpc.CallOption) (*ZRevRankRsp, error)
	ZIncrBy(ctx context.Context, in *ZIncrByReq, opts ...grpc.CallOption) (*ZIncrByRsp, error)
	ZRange(ctx context.Context, in *ZRangeReq, opts ...grpc.CallOption) (*ZRangeRsp, error)
	ZRangeWithScores(ctx context.Context, in *ZRangeWithScoresReq, opts ...grpc.CallOption) (*ZRangeWithScoresRsp, error)
	ZRem(ctx context.Context, in *ZRemReq, opts ...grpc.CallOption) (*ZRemRsp, error)
	ZRevRange(ctx context.Context, in *ZRevRangeReq, opts ...grpc.CallOption) (*ZRevRangeRsp, error)
	ZRevRangeWithScores(ctx context.Context, in *ZRevRangeWithScoresReq, opts ...grpc.CallOption) (*ZRevRangeWithScoresRsp, error)
	ZGetByRank(ctx context.Context, in *ZGetByRankReq, opts ...grpc.CallOption) (*ZGetByRankRsp, error)
	ZRevGetByRank(ctx context.Context, in *ZRevGetByRankReq, opts ...grpc.CallOption) (*ZRevGetByRankRsp, error)
	ScoreRange(ctx context.Context, in *ZScoreRangeReq, opts ...grpc.CallOption) (*ZScoreRangeRsp, error)
	ZRevScoreRange(ctx context.Context, in *ZRevScoreRangeReq, opts ...grpc.CallOption) (*ZRevScoreRangeRsp, error)
	ZKeyExists(ctx context.Context, in *ZKeyExistsReq, opts ...grpc.CallOption) (*ZKeyExistsRsp, error)
	ZClear(ctx context.Context, in *ZClearReq, opts ...grpc.CallOption) (*ZClearRsp, error)
	ZExpire(ctx context.Context, in *ZExpireReq, opts ...grpc.CallOption) (*ZExpireRsp, error)
	ZTTL(ctx context.Context, in *ZTTLReq, opts ...grpc.CallOption) (*ZTTLRsp, error)
}

type rosedbClient struct {
	cc grpc.ClientConnInterface
}

func NewRosedbClient(cc grpc.ClientConnInterface) RosedbClient {
	return &rosedbClient{cc}
}

func (c *rosedbClient) SAdd(ctx context.Context, in *SAddReq, opts ...grpc.CallOption) (*SAddRsp, error) {
	out := new(SAddRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SPop(ctx context.Context, in *SPopReq, opts ...grpc.CallOption) (*SPopRsp, error) {
	out := new(SPopRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SIsMember(ctx context.Context, in *SIsMemberReq, opts ...grpc.CallOption) (*SIsMemberRsp, error) {
	out := new(SIsMemberRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SIsMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SRandMember(ctx context.Context, in *SRandMemberReq, opts ...grpc.CallOption) (*SRandMemberRsp, error) {
	out := new(SRandMemberRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SRandMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SRem(ctx context.Context, in *SRemReq, opts ...grpc.CallOption) (*SRemRsp, error) {
	out := new(SRemRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SRem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SMove(ctx context.Context, in *SMoveReq, opts ...grpc.CallOption) (*SMoveRsp, error) {
	out := new(SMoveRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SCard(ctx context.Context, in *SCardReq, opts ...grpc.CallOption) (*SCardRsp, error) {
	out := new(SCardRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SMembers(ctx context.Context, in *SMembersReq, opts ...grpc.CallOption) (*SMembersRsp, error) {
	out := new(SMembersRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SDiff(ctx context.Context, in *SDiffReq, opts ...grpc.CallOption) (*SDiffRsp, error) {
	out := new(SDiffRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SKeyExists(ctx context.Context, in *SKeyExistsReq, opts ...grpc.CallOption) (*SKeyExistsRsp, error) {
	out := new(SKeyExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SKeyExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SClear(ctx context.Context, in *SClearReq, opts ...grpc.CallOption) (*SClearRsp, error) {
	out := new(SClearRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SExpire(ctx context.Context, in *SExpireReq, opts ...grpc.CallOption) (*SExpireRsp, error) {
	out := new(SExpireRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) STTL(ctx context.Context, in *STTLReq, opts ...grpc.CallOption) (*STTLRsp, error) {
	out := new(STTLRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/STTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HSet(ctx context.Context, in *HSetReq, opts ...grpc.CallOption) (*HSetRsp, error) {
	out := new(HSetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HSetNx(ctx context.Context, in *HSetNxReq, opts ...grpc.CallOption) (*HSetNxRsp, error) {
	out := new(HSetNxRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HSetNx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HGet(ctx context.Context, in *HGetReq, opts ...grpc.CallOption) (*HGetRsp, error) {
	out := new(HGetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HGetAll(ctx context.Context, in *HGetAllReq, opts ...grpc.CallOption) (*HGetAllRsp, error) {
	out := new(HGetAllRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HMSet(ctx context.Context, in *HMSetReq, opts ...grpc.CallOption) (*HMSetRsp, error) {
	out := new(HMSetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HMSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HMGet(ctx context.Context, in *HMGetReq, opts ...grpc.CallOption) (*HMGetRsp, error) {
	out := new(HMGetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HMGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HDel(ctx context.Context, in *HDelReq, opts ...grpc.CallOption) (*HDelRsp, error) {
	out := new(HDelRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HKeyExists(ctx context.Context, in *HKeyExistsReq, opts ...grpc.CallOption) (*HKeyExistsRsp, error) {
	out := new(HKeyExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HKeyExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HExists(ctx context.Context, in *HExistsReq, opts ...grpc.CallOption) (*HExistsRsp, error) {
	out := new(HExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HLen(ctx context.Context, in *HLenReq, opts ...grpc.CallOption) (*HLenRsp, error) {
	out := new(HLenRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HVals(ctx context.Context, in *HValsReq, opts ...grpc.CallOption) (*HValsRsp, error) {
	out := new(HValsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HVals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HKeys(ctx context.Context, in *HKeysReq, opts ...grpc.CallOption) (*HKeysRsp, error) {
	out := new(HKeysRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HClear(ctx context.Context, in *HClearReq, opts ...grpc.CallOption) (*HClearRsp, error) {
	out := new(HClearRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HExpire(ctx context.Context, in *HExpireReq, opts ...grpc.CallOption) (*HExpireRsp, error) {
	out := new(HExpireRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) HTTL(ctx context.Context, in *HTTLReq, opts ...grpc.CallOption) (*HTTLRsp, error) {
	out := new(HTTLRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/HTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LPush(ctx context.Context, in *LPushReq, opts ...grpc.CallOption) (*LPushRsp, error) {
	out := new(LPushRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) RPush(ctx context.Context, in *RPushReq, opts ...grpc.CallOption) (*RPushRsp, error) {
	out := new(RPushRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/RPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LPop(ctx context.Context, in *LPopReq, opts ...grpc.CallOption) (*LPopRsp, error) {
	out := new(LPopRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) RPop(ctx context.Context, in *RPopReq, opts ...grpc.CallOption) (*RPopRsp, error) {
	out := new(RPopRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/RPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LIndex(ctx context.Context, in *LIndexReq, opts ...grpc.CallOption) (*LIndexRsp, error) {
	out := new(LIndexRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LRem(ctx context.Context, in *LRemReq, opts ...grpc.CallOption) (*LRemRsp, error) {
	out := new(LRemRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LRem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LInsert(ctx context.Context, in *LInsertReq, opts ...grpc.CallOption) (*LInsertRsp, error) {
	out := new(LInsertRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LSet(ctx context.Context, in *LSetReq, opts ...grpc.CallOption) (*LSetRsp, error) {
	out := new(LSetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LTrim(ctx context.Context, in *LTrimReq, opts ...grpc.CallOption) (*LTrimRsp, error) {
	out := new(LTrimRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LTrim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LRange(ctx context.Context, in *LRangeReq, opts ...grpc.CallOption) (*LRangeRsp, error) {
	out := new(LRangeRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LLen(ctx context.Context, in *LLenReq, opts ...grpc.CallOption) (*LLenRsp, error) {
	out := new(LLenRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LKeyExists(ctx context.Context, in *LKeyExistsReq, opts ...grpc.CallOption) (*LKeyExistsRsp, error) {
	out := new(LKeyExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LKeyExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LValExists(ctx context.Context, in *LValExistsReq, opts ...grpc.CallOption) (*LValExistsRsp, error) {
	out := new(LValExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LValExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LClear(ctx context.Context, in *LClearReq, opts ...grpc.CallOption) (*LClearRsp, error) {
	out := new(LClearRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LExpire(ctx context.Context, in *LExpireReq, opts ...grpc.CallOption) (*LExpireRsp, error) {
	out := new(LExpireRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) LTTL(ctx context.Context, in *LTTLReq, opts ...grpc.CallOption) (*LTTLRsp, error) {
	out := new(LTTLRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/LTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRsp, error) {
	out := new(SetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SetNx(ctx context.Context, in *SetNxReq, opts ...grpc.CallOption) (*SetNxRsp, error) {
	out := new(SetNxRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SetNx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) SetEx(ctx context.Context, in *SetExReq, opts ...grpc.CallOption) (*SetExRsp, error) {
	out := new(SetExRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/SetEx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) GetSet(ctx context.Context, in *GetSetReq, opts ...grpc.CallOption) (*GetSetRsp, error) {
	out := new(GetSetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) MSet(ctx context.Context, in *MSetReq, opts ...grpc.CallOption) (*MSetRsp, error) {
	out := new(MSetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/MSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) MGet(ctx context.Context, in *MGetReq, opts ...grpc.CallOption) (*MGetRsp, error) {
	out := new(MGetRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/MGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) Append(ctx context.Context, in *AppendReq, opts ...grpc.CallOption) (*AppendRsp, error) {
	out := new(AppendRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) StrExists(ctx context.Context, in *StrExistsReq, opts ...grpc.CallOption) (*StrExistsRsp, error) {
	out := new(StrExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/StrExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveRsp, error) {
	out := new(RemoveRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) PrefixScan(ctx context.Context, in *PrefixScanReq, opts ...grpc.CallOption) (*PrefixScanRsp, error) {
	out := new(PrefixScanRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/PrefixScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) RangeScan(ctx context.Context, in *RangeScanReq, opts ...grpc.CallOption) (*RangeScanRsp, error) {
	out := new(RangeScanRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/RangeScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) Expire(ctx context.Context, in *ExpireReq, opts ...grpc.CallOption) (*ExpireRsp, error) {
	out := new(ExpireRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/Expire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) Persist(ctx context.Context, in *PersistReq, opts ...grpc.CallOption) (*PersistRsp, error) {
	out := new(PersistRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/Persist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) TTl(ctx context.Context, in *TTLReq, opts ...grpc.CallOption) (*TTLRsp, error) {
	out := new(TTLRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/TTl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZAdd(ctx context.Context, in *ZAddReq, opts ...grpc.CallOption) (*ZAddRsp, error) {
	out := new(ZAddRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZScore(ctx context.Context, in *ZScoreReq, opts ...grpc.CallOption) (*ZScoreRsp, error) {
	out := new(ZScoreRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRank(ctx context.Context, in *ZRankReq, opts ...grpc.CallOption) (*ZRankRsp, error) {
	out := new(ZRankRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZCard(ctx context.Context, in *ZCardReq, opts ...grpc.CallOption) (*ZCardRsp, error) {
	out := new(ZCardRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRevRank(ctx context.Context, in *ZRevRankReq, opts ...grpc.CallOption) (*ZRevRankRsp, error) {
	out := new(ZRevRankRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRevRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZIncrBy(ctx context.Context, in *ZIncrByReq, opts ...grpc.CallOption) (*ZIncrByRsp, error) {
	out := new(ZIncrByRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZIncrBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRange(ctx context.Context, in *ZRangeReq, opts ...grpc.CallOption) (*ZRangeRsp, error) {
	out := new(ZRangeRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRangeWithScores(ctx context.Context, in *ZRangeWithScoresReq, opts ...grpc.CallOption) (*ZRangeWithScoresRsp, error) {
	out := new(ZRangeWithScoresRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRangeWithScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRem(ctx context.Context, in *ZRemReq, opts ...grpc.CallOption) (*ZRemRsp, error) {
	out := new(ZRemRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRevRange(ctx context.Context, in *ZRevRangeReq, opts ...grpc.CallOption) (*ZRevRangeRsp, error) {
	out := new(ZRevRangeRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRevRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRevRangeWithScores(ctx context.Context, in *ZRevRangeWithScoresReq, opts ...grpc.CallOption) (*ZRevRangeWithScoresRsp, error) {
	out := new(ZRevRangeWithScoresRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRevRangeWithScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZGetByRank(ctx context.Context, in *ZGetByRankReq, opts ...grpc.CallOption) (*ZGetByRankRsp, error) {
	out := new(ZGetByRankRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZGetByRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRevGetByRank(ctx context.Context, in *ZRevGetByRankReq, opts ...grpc.CallOption) (*ZRevGetByRankRsp, error) {
	out := new(ZRevGetByRankRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRevGetByRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ScoreRange(ctx context.Context, in *ZScoreRangeReq, opts ...grpc.CallOption) (*ZScoreRangeRsp, error) {
	out := new(ZScoreRangeRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ScoreRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZRevScoreRange(ctx context.Context, in *ZRevScoreRangeReq, opts ...grpc.CallOption) (*ZRevScoreRangeRsp, error) {
	out := new(ZRevScoreRangeRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZRevScoreRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZKeyExists(ctx context.Context, in *ZKeyExistsReq, opts ...grpc.CallOption) (*ZKeyExistsRsp, error) {
	out := new(ZKeyExistsRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZKeyExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZClear(ctx context.Context, in *ZClearReq, opts ...grpc.CallOption) (*ZClearRsp, error) {
	out := new(ZClearRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZExpire(ctx context.Context, in *ZExpireReq, opts ...grpc.CallOption) (*ZExpireRsp, error) {
	out := new(ZExpireRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosedbClient) ZTTL(ctx context.Context, in *ZTTLReq, opts ...grpc.CallOption) (*ZTTLRsp, error) {
	out := new(ZTTLRsp)
	err := c.cc.Invoke(ctx, "/proto.rosedb/ZTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RosedbServer is the server API for Rosedb service.
// All implementations must embed UnimplementedRosedbServer
// for forward compatibility
type RosedbServer interface {
	// ******************** cmd_set ****************
	SAdd(context.Context, *SAddReq) (*SAddRsp, error)
	SPop(context.Context, *SPopReq) (*SPopRsp, error)
	SIsMember(context.Context, *SIsMemberReq) (*SIsMemberRsp, error)
	SRandMember(context.Context, *SRandMemberReq) (*SRandMemberRsp, error)
	SRem(context.Context, *SRemReq) (*SRemRsp, error)
	SMove(context.Context, *SMoveReq) (*SMoveRsp, error)
	SCard(context.Context, *SCardReq) (*SCardRsp, error)
	SMembers(context.Context, *SMembersReq) (*SMembersRsp, error)
	SDiff(context.Context, *SDiffReq) (*SDiffRsp, error)
	SKeyExists(context.Context, *SKeyExistsReq) (*SKeyExistsRsp, error)
	SClear(context.Context, *SClearReq) (*SClearRsp, error)
	SExpire(context.Context, *SExpireReq) (*SExpireRsp, error)
	STTL(context.Context, *STTLReq) (*STTLRsp, error)
	// ******************** cmd_hash ****************
	HSet(context.Context, *HSetReq) (*HSetRsp, error)
	HSetNx(context.Context, *HSetNxReq) (*HSetNxRsp, error)
	HGet(context.Context, *HGetReq) (*HGetRsp, error)
	HGetAll(context.Context, *HGetAllReq) (*HGetAllRsp, error)
	HMSet(context.Context, *HMSetReq) (*HMSetRsp, error)
	HMGet(context.Context, *HMGetReq) (*HMGetRsp, error)
	HDel(context.Context, *HDelReq) (*HDelRsp, error)
	HKeyExists(context.Context, *HKeyExistsReq) (*HKeyExistsRsp, error)
	HExists(context.Context, *HExistsReq) (*HExistsRsp, error)
	HLen(context.Context, *HLenReq) (*HLenRsp, error)
	HVals(context.Context, *HValsReq) (*HValsRsp, error)
	HKeys(context.Context, *HKeysReq) (*HKeysRsp, error)
	HClear(context.Context, *HClearReq) (*HClearRsp, error)
	HExpire(context.Context, *HExpireReq) (*HExpireRsp, error)
	HTTL(context.Context, *HTTLReq) (*HTTLRsp, error)
	// ******************** cmd_list ****************
	LPush(context.Context, *LPushReq) (*LPushRsp, error)
	RPush(context.Context, *RPushReq) (*RPushRsp, error)
	LPop(context.Context, *LPopReq) (*LPopRsp, error)
	RPop(context.Context, *RPopReq) (*RPopRsp, error)
	LIndex(context.Context, *LIndexReq) (*LIndexRsp, error)
	LRem(context.Context, *LRemReq) (*LRemRsp, error)
	LInsert(context.Context, *LInsertReq) (*LInsertRsp, error)
	LSet(context.Context, *LSetReq) (*LSetRsp, error)
	LTrim(context.Context, *LTrimReq) (*LTrimRsp, error)
	LRange(context.Context, *LRangeReq) (*LRangeRsp, error)
	LLen(context.Context, *LLenReq) (*LLenRsp, error)
	LKeyExists(context.Context, *LKeyExistsReq) (*LKeyExistsRsp, error)
	LValExists(context.Context, *LValExistsReq) (*LValExistsRsp, error)
	LClear(context.Context, *LClearReq) (*LClearRsp, error)
	LExpire(context.Context, *LExpireReq) (*LExpireRsp, error)
	LTTL(context.Context, *LTTLReq) (*LTTLRsp, error)
	// ******************** cmd_str ****************
	Set(context.Context, *SetReq) (*SetRsp, error)
	SetNx(context.Context, *SetNxReq) (*SetNxRsp, error)
	SetEx(context.Context, *SetExReq) (*SetExRsp, error)
	Get(context.Context, *GetReq) (*GetRsp, error)
	GetSet(context.Context, *GetSetReq) (*GetSetRsp, error)
	MSet(context.Context, *MSetReq) (*MSetRsp, error)
	MGet(context.Context, *MGetReq) (*MGetRsp, error)
	Append(context.Context, *AppendReq) (*AppendRsp, error)
	StrExists(context.Context, *StrExistsReq) (*StrExistsRsp, error)
	Remove(context.Context, *RemoveReq) (*RemoveRsp, error)
	PrefixScan(context.Context, *PrefixScanReq) (*PrefixScanRsp, error)
	RangeScan(context.Context, *RangeScanReq) (*RangeScanRsp, error)
	Expire(context.Context, *ExpireReq) (*ExpireRsp, error)
	Persist(context.Context, *PersistReq) (*PersistRsp, error)
	TTl(context.Context, *TTLReq) (*TTLRsp, error)
	// ******************** cmd_zset ****************
	ZAdd(context.Context, *ZAddReq) (*ZAddRsp, error)
	ZScore(context.Context, *ZScoreReq) (*ZScoreRsp, error)
	ZRank(context.Context, *ZRankReq) (*ZRankRsp, error)
	ZCard(context.Context, *ZCardReq) (*ZCardRsp, error)
	ZRevRank(context.Context, *ZRevRankReq) (*ZRevRankRsp, error)
	ZIncrBy(context.Context, *ZIncrByReq) (*ZIncrByRsp, error)
	ZRange(context.Context, *ZRangeReq) (*ZRangeRsp, error)
	ZRangeWithScores(context.Context, *ZRangeWithScoresReq) (*ZRangeWithScoresRsp, error)
	ZRem(context.Context, *ZRemReq) (*ZRemRsp, error)
	ZRevRange(context.Context, *ZRevRangeReq) (*ZRevRangeRsp, error)
	ZRevRangeWithScores(context.Context, *ZRevRangeWithScoresReq) (*ZRevRangeWithScoresRsp, error)
	ZGetByRank(context.Context, *ZGetByRankReq) (*ZGetByRankRsp, error)
	ZRevGetByRank(context.Context, *ZRevGetByRankReq) (*ZRevGetByRankRsp, error)
	ScoreRange(context.Context, *ZScoreRangeReq) (*ZScoreRangeRsp, error)
	ZRevScoreRange(context.Context, *ZRevScoreRangeReq) (*ZRevScoreRangeRsp, error)
	ZKeyExists(context.Context, *ZKeyExistsReq) (*ZKeyExistsRsp, error)
	ZClear(context.Context, *ZClearReq) (*ZClearRsp, error)
	ZExpire(context.Context, *ZExpireReq) (*ZExpireRsp, error)
	ZTTL(context.Context, *ZTTLReq) (*ZTTLRsp, error)
	mustEmbedUnimplementedRosedbServer()
}

// UnimplementedRosedbServer must be embedded to have forward compatible implementations.
type UnimplementedRosedbServer struct {
}

func (UnimplementedRosedbServer) SAdd(context.Context, *SAddReq) (*SAddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SAdd not implemented")
}
func (UnimplementedRosedbServer) SPop(context.Context, *SPopReq) (*SPopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPop not implemented")
}
func (UnimplementedRosedbServer) SIsMember(context.Context, *SIsMemberReq) (*SIsMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SIsMember not implemented")
}
func (UnimplementedRosedbServer) SRandMember(context.Context, *SRandMemberReq) (*SRandMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SRandMember not implemented")
}
func (UnimplementedRosedbServer) SRem(context.Context, *SRemReq) (*SRemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SRem not implemented")
}
func (UnimplementedRosedbServer) SMove(context.Context, *SMoveReq) (*SMoveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMove not implemented")
}
func (UnimplementedRosedbServer) SCard(context.Context, *SCardReq) (*SCardRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCard not implemented")
}
func (UnimplementedRosedbServer) SMembers(context.Context, *SMembersReq) (*SMembersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMembers not implemented")
}
func (UnimplementedRosedbServer) SDiff(context.Context, *SDiffReq) (*SDiffRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDiff not implemented")
}
func (UnimplementedRosedbServer) SKeyExists(context.Context, *SKeyExistsReq) (*SKeyExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SKeyExists not implemented")
}
func (UnimplementedRosedbServer) SClear(context.Context, *SClearReq) (*SClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SClear not implemented")
}
func (UnimplementedRosedbServer) SExpire(context.Context, *SExpireReq) (*SExpireRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SExpire not implemented")
}
func (UnimplementedRosedbServer) STTL(context.Context, *STTLReq) (*STTLRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method STTL not implemented")
}
func (UnimplementedRosedbServer) HSet(context.Context, *HSetReq) (*HSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSet not implemented")
}
func (UnimplementedRosedbServer) HSetNx(context.Context, *HSetNxReq) (*HSetNxRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSetNx not implemented")
}
func (UnimplementedRosedbServer) HGet(context.Context, *HGetReq) (*HGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGet not implemented")
}
func (UnimplementedRosedbServer) HGetAll(context.Context, *HGetAllReq) (*HGetAllRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGetAll not implemented")
}
func (UnimplementedRosedbServer) HMSet(context.Context, *HMSetReq) (*HMSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMSet not implemented")
}
func (UnimplementedRosedbServer) HMGet(context.Context, *HMGetReq) (*HMGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMGet not implemented")
}
func (UnimplementedRosedbServer) HDel(context.Context, *HDelReq) (*HDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HDel not implemented")
}
func (UnimplementedRosedbServer) HKeyExists(context.Context, *HKeyExistsReq) (*HKeyExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HKeyExists not implemented")
}
func (UnimplementedRosedbServer) HExists(context.Context, *HExistsReq) (*HExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HExists not implemented")
}
func (UnimplementedRosedbServer) HLen(context.Context, *HLenReq) (*HLenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HLen not implemented")
}
func (UnimplementedRosedbServer) HVals(context.Context, *HValsReq) (*HValsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HVals not implemented")
}
func (UnimplementedRosedbServer) HKeys(context.Context, *HKeysReq) (*HKeysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HKeys not implemented")
}
func (UnimplementedRosedbServer) HClear(context.Context, *HClearReq) (*HClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HClear not implemented")
}
func (UnimplementedRosedbServer) HExpire(context.Context, *HExpireReq) (*HExpireRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HExpire not implemented")
}
func (UnimplementedRosedbServer) HTTL(context.Context, *HTTLReq) (*HTTLRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTL not implemented")
}
func (UnimplementedRosedbServer) LPush(context.Context, *LPushReq) (*LPushRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPush not implemented")
}
func (UnimplementedRosedbServer) RPush(context.Context, *RPushReq) (*RPushRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPush not implemented")
}
func (UnimplementedRosedbServer) LPop(context.Context, *LPopReq) (*LPopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPop not implemented")
}
func (UnimplementedRosedbServer) RPop(context.Context, *RPopReq) (*RPopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPop not implemented")
}
func (UnimplementedRosedbServer) LIndex(context.Context, *LIndexReq) (*LIndexRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIndex not implemented")
}
func (UnimplementedRosedbServer) LRem(context.Context, *LRemReq) (*LRemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRem not implemented")
}
func (UnimplementedRosedbServer) LInsert(context.Context, *LInsertReq) (*LInsertRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LInsert not implemented")
}
func (UnimplementedRosedbServer) LSet(context.Context, *LSetReq) (*LSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSet not implemented")
}
func (UnimplementedRosedbServer) LTrim(context.Context, *LTrimReq) (*LTrimRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LTrim not implemented")
}
func (UnimplementedRosedbServer) LRange(context.Context, *LRangeReq) (*LRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRange not implemented")
}
func (UnimplementedRosedbServer) LLen(context.Context, *LLenReq) (*LLenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LLen not implemented")
}
func (UnimplementedRosedbServer) LKeyExists(context.Context, *LKeyExistsReq) (*LKeyExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LKeyExists not implemented")
}
func (UnimplementedRosedbServer) LValExists(context.Context, *LValExistsReq) (*LValExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LValExists not implemented")
}
func (UnimplementedRosedbServer) LClear(context.Context, *LClearReq) (*LClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LClear not implemented")
}
func (UnimplementedRosedbServer) LExpire(context.Context, *LExpireReq) (*LExpireRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LExpire not implemented")
}
func (UnimplementedRosedbServer) LTTL(context.Context, *LTTLReq) (*LTTLRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LTTL not implemented")
}
func (UnimplementedRosedbServer) Set(context.Context, *SetReq) (*SetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRosedbServer) SetNx(context.Context, *SetNxReq) (*SetNxRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNx not implemented")
}
func (UnimplementedRosedbServer) SetEx(context.Context, *SetExReq) (*SetExRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEx not implemented")
}
func (UnimplementedRosedbServer) Get(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRosedbServer) GetSet(context.Context, *GetSetReq) (*GetSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedRosedbServer) MSet(context.Context, *MSetReq) (*MSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSet not implemented")
}
func (UnimplementedRosedbServer) MGet(context.Context, *MGetReq) (*MGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGet not implemented")
}
func (UnimplementedRosedbServer) Append(context.Context, *AppendReq) (*AppendRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedRosedbServer) StrExists(context.Context, *StrExistsReq) (*StrExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrExists not implemented")
}
func (UnimplementedRosedbServer) Remove(context.Context, *RemoveReq) (*RemoveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedRosedbServer) PrefixScan(context.Context, *PrefixScanReq) (*PrefixScanRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrefixScan not implemented")
}
func (UnimplementedRosedbServer) RangeScan(context.Context, *RangeScanReq) (*RangeScanRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RangeScan not implemented")
}
func (UnimplementedRosedbServer) Expire(context.Context, *ExpireReq) (*ExpireRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (UnimplementedRosedbServer) Persist(context.Context, *PersistReq) (*PersistRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Persist not implemented")
}
func (UnimplementedRosedbServer) TTl(context.Context, *TTLReq) (*TTLRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TTl not implemented")
}
func (UnimplementedRosedbServer) ZAdd(context.Context, *ZAddReq) (*ZAddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (UnimplementedRosedbServer) ZScore(context.Context, *ZScoreReq) (*ZScoreRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScore not implemented")
}
func (UnimplementedRosedbServer) ZRank(context.Context, *ZRankReq) (*ZRankRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRank not implemented")
}
func (UnimplementedRosedbServer) ZCard(context.Context, *ZCardReq) (*ZCardRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZCard not implemented")
}
func (UnimplementedRosedbServer) ZRevRank(context.Context, *ZRevRankReq) (*ZRevRankRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevRank not implemented")
}
func (UnimplementedRosedbServer) ZIncrBy(context.Context, *ZIncrByReq) (*ZIncrByRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZIncrBy not implemented")
}
func (UnimplementedRosedbServer) ZRange(context.Context, *ZRangeReq) (*ZRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRange not implemented")
}
func (UnimplementedRosedbServer) ZRangeWithScores(context.Context, *ZRangeWithScoresReq) (*ZRangeWithScoresRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRangeWithScores not implemented")
}
func (UnimplementedRosedbServer) ZRem(context.Context, *ZRemReq) (*ZRemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRem not implemented")
}
func (UnimplementedRosedbServer) ZRevRange(context.Context, *ZRevRangeReq) (*ZRevRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevRange not implemented")
}
func (UnimplementedRosedbServer) ZRevRangeWithScores(context.Context, *ZRevRangeWithScoresReq) (*ZRevRangeWithScoresRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevRangeWithScores not implemented")
}
func (UnimplementedRosedbServer) ZGetByRank(context.Context, *ZGetByRankReq) (*ZGetByRankRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZGetByRank not implemented")
}
func (UnimplementedRosedbServer) ZRevGetByRank(context.Context, *ZRevGetByRankReq) (*ZRevGetByRankRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevGetByRank not implemented")
}
func (UnimplementedRosedbServer) ScoreRange(context.Context, *ZScoreRangeReq) (*ZScoreRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreRange not implemented")
}
func (UnimplementedRosedbServer) ZRevScoreRange(context.Context, *ZRevScoreRangeReq) (*ZRevScoreRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevScoreRange not implemented")
}
func (UnimplementedRosedbServer) ZKeyExists(context.Context, *ZKeyExistsReq) (*ZKeyExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZKeyExists not implemented")
}
func (UnimplementedRosedbServer) ZClear(context.Context, *ZClearReq) (*ZClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZClear not implemented")
}
func (UnimplementedRosedbServer) ZExpire(context.Context, *ZExpireReq) (*ZExpireRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZExpire not implemented")
}
func (UnimplementedRosedbServer) ZTTL(context.Context, *ZTTLReq) (*ZTTLRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZTTL not implemented")
}
func (UnimplementedRosedbServer) mustEmbedUnimplementedRosedbServer() {}

// UnsafeRosedbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RosedbServer will
// result in compilation errors.
type UnsafeRosedbServer interface {
	mustEmbedUnimplementedRosedbServer()
}

func RegisterRosedbServer(s grpc.ServiceRegistrar, srv RosedbServer) {
	s.RegisterService(&Rosedb_ServiceDesc, srv)
}

func _Rosedb_SAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SAdd(ctx, req.(*SAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SPop(ctx, req.(*SPopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SIsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIsMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SIsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SIsMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SIsMember(ctx, req.(*SIsMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SRandMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRandMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SRandMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SRandMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SRandMember(ctx, req.(*SRandMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SRem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SRem(ctx, req.(*SRemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SMove(ctx, req.(*SMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SCard(ctx, req.(*SCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SMembers(ctx, req.(*SMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDiffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SDiff(ctx, req.(*SDiffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SKeyExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKeyExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SKeyExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SKeyExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SKeyExists(ctx, req.(*SKeyExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SClear(ctx, req.(*SClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SExpire(ctx, req.(*SExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_STTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STTLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).STTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/STTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).STTL(ctx, req.(*STTLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HSet(ctx, req.(*HSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HSetNx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSetNxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HSetNx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HSetNx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HSetNx(ctx, req.(*HSetNxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HGet(ctx, req.(*HGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HGetAll(ctx, req.(*HGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HMSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HMSet(ctx, req.(*HMSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HMGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HMGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HMGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HMGet(ctx, req.(*HMGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HDel(ctx, req.(*HDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HKeyExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HKeyExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HKeyExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HKeyExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HKeyExists(ctx, req.(*HKeyExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HExists(ctx, req.(*HExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HLenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HLen(ctx, req.(*HLenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HVals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HValsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HVals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HVals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HVals(ctx, req.(*HValsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HKeys(ctx, req.(*HKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HClear(ctx, req.(*HClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HExpire(ctx, req.(*HExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_HTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).HTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/HTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).HTTL(ctx, req.(*HTTLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LPush(ctx, req.(*LPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_RPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).RPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/RPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).RPush(ctx, req.(*RPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LPop(ctx, req.(*LPopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_RPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).RPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/RPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).RPop(ctx, req.(*RPopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LIndex(ctx, req.(*LIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LRemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LRem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LRem(ctx, req.(*LRemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LInsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LInsert(ctx, req.(*LInsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LSet(ctx, req.(*LSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LTrim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LTrimReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LTrim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LTrim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LTrim(ctx, req.(*LTrimReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LRange(ctx, req.(*LRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LLen(ctx, req.(*LLenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LKeyExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LKeyExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LKeyExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LKeyExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LKeyExists(ctx, req.(*LKeyExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LValExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LValExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LValExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LValExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LValExists(ctx, req.(*LValExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LClear(ctx, req.(*LClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LExpire(ctx, req.(*LExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_LTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LTTLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).LTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/LTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).LTTL(ctx, req.(*LTTLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SetNx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SetNx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SetNx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SetNx(ctx, req.(*SetNxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_SetEx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).SetEx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/SetEx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).SetEx(ctx, req.(*SetExReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).GetSet(ctx, req.(*GetSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_MSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).MSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/MSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).MSet(ctx, req.(*MSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_MGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).MGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/MGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).MGet(ctx, req.(*MGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).Append(ctx, req.(*AppendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_StrExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).StrExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/StrExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).StrExists(ctx, req.(*StrExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_PrefixScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).PrefixScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/PrefixScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).PrefixScan(ctx, req.(*PrefixScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_RangeScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).RangeScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/RangeScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).RangeScan(ctx, req.(*RangeScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/Expire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).Expire(ctx, req.(*ExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_Persist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).Persist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/Persist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).Persist(ctx, req.(*PersistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_TTl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).TTl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/TTl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).TTl(ctx, req.(*TTLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZAdd(ctx, req.(*ZAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZScore(ctx, req.(*ZScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRank(ctx, req.(*ZRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZCard(ctx, req.(*ZCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRevRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRevRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRevRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRevRank(ctx, req.(*ZRevRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZIncrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZIncrByReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZIncrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZIncrBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZIncrBy(ctx, req.(*ZIncrByReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRange(ctx, req.(*ZRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRangeWithScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRangeWithScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRangeWithScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRangeWithScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRangeWithScores(ctx, req.(*ZRangeWithScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRem(ctx, req.(*ZRemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRevRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRevRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRevRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRevRange(ctx, req.(*ZRevRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRevRangeWithScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRangeWithScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRevRangeWithScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRevRangeWithScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRevRangeWithScores(ctx, req.(*ZRevRangeWithScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZGetByRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZGetByRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZGetByRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZGetByRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZGetByRank(ctx, req.(*ZGetByRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRevGetByRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevGetByRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRevGetByRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRevGetByRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRevGetByRank(ctx, req.(*ZRevGetByRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ScoreRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScoreRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ScoreRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ScoreRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ScoreRange(ctx, req.(*ZScoreRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZRevScoreRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevScoreRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZRevScoreRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZRevScoreRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZRevScoreRange(ctx, req.(*ZRevScoreRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZKeyExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZKeyExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZKeyExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZKeyExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZKeyExists(ctx, req.(*ZKeyExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZClear(ctx, req.(*ZClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZExpire(ctx, req.(*ZExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rosedb_ZTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZTTLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosedbServer).ZTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rosedb/ZTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosedbServer).ZTTL(ctx, req.(*ZTTLReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rosedb_ServiceDesc is the grpc.ServiceDesc for Rosedb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rosedb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rosedb",
	HandlerType: (*RosedbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SAdd",
			Handler:    _Rosedb_SAdd_Handler,
		},
		{
			MethodName: "SPop",
			Handler:    _Rosedb_SPop_Handler,
		},
		{
			MethodName: "SIsMember",
			Handler:    _Rosedb_SIsMember_Handler,
		},
		{
			MethodName: "SRandMember",
			Handler:    _Rosedb_SRandMember_Handler,
		},
		{
			MethodName: "SRem",
			Handler:    _Rosedb_SRem_Handler,
		},
		{
			MethodName: "SMove",
			Handler:    _Rosedb_SMove_Handler,
		},
		{
			MethodName: "SCard",
			Handler:    _Rosedb_SCard_Handler,
		},
		{
			MethodName: "SMembers",
			Handler:    _Rosedb_SMembers_Handler,
		},
		{
			MethodName: "SDiff",
			Handler:    _Rosedb_SDiff_Handler,
		},
		{
			MethodName: "SKeyExists",
			Handler:    _Rosedb_SKeyExists_Handler,
		},
		{
			MethodName: "SClear",
			Handler:    _Rosedb_SClear_Handler,
		},
		{
			MethodName: "SExpire",
			Handler:    _Rosedb_SExpire_Handler,
		},
		{
			MethodName: "STTL",
			Handler:    _Rosedb_STTL_Handler,
		},
		{
			MethodName: "HSet",
			Handler:    _Rosedb_HSet_Handler,
		},
		{
			MethodName: "HSetNx",
			Handler:    _Rosedb_HSetNx_Handler,
		},
		{
			MethodName: "HGet",
			Handler:    _Rosedb_HGet_Handler,
		},
		{
			MethodName: "HGetAll",
			Handler:    _Rosedb_HGetAll_Handler,
		},
		{
			MethodName: "HMSet",
			Handler:    _Rosedb_HMSet_Handler,
		},
		{
			MethodName: "HMGet",
			Handler:    _Rosedb_HMGet_Handler,
		},
		{
			MethodName: "HDel",
			Handler:    _Rosedb_HDel_Handler,
		},
		{
			MethodName: "HKeyExists",
			Handler:    _Rosedb_HKeyExists_Handler,
		},
		{
			MethodName: "HExists",
			Handler:    _Rosedb_HExists_Handler,
		},
		{
			MethodName: "HLen",
			Handler:    _Rosedb_HLen_Handler,
		},
		{
			MethodName: "HVals",
			Handler:    _Rosedb_HVals_Handler,
		},
		{
			MethodName: "HKeys",
			Handler:    _Rosedb_HKeys_Handler,
		},
		{
			MethodName: "HClear",
			Handler:    _Rosedb_HClear_Handler,
		},
		{
			MethodName: "HExpire",
			Handler:    _Rosedb_HExpire_Handler,
		},
		{
			MethodName: "HTTL",
			Handler:    _Rosedb_HTTL_Handler,
		},
		{
			MethodName: "LPush",
			Handler:    _Rosedb_LPush_Handler,
		},
		{
			MethodName: "RPush",
			Handler:    _Rosedb_RPush_Handler,
		},
		{
			MethodName: "LPop",
			Handler:    _Rosedb_LPop_Handler,
		},
		{
			MethodName: "RPop",
			Handler:    _Rosedb_RPop_Handler,
		},
		{
			MethodName: "LIndex",
			Handler:    _Rosedb_LIndex_Handler,
		},
		{
			MethodName: "LRem",
			Handler:    _Rosedb_LRem_Handler,
		},
		{
			MethodName: "LInsert",
			Handler:    _Rosedb_LInsert_Handler,
		},
		{
			MethodName: "LSet",
			Handler:    _Rosedb_LSet_Handler,
		},
		{
			MethodName: "LTrim",
			Handler:    _Rosedb_LTrim_Handler,
		},
		{
			MethodName: "LRange",
			Handler:    _Rosedb_LRange_Handler,
		},
		{
			MethodName: "LLen",
			Handler:    _Rosedb_LLen_Handler,
		},
		{
			MethodName: "LKeyExists",
			Handler:    _Rosedb_LKeyExists_Handler,
		},
		{
			MethodName: "LValExists",
			Handler:    _Rosedb_LValExists_Handler,
		},
		{
			MethodName: "LClear",
			Handler:    _Rosedb_LClear_Handler,
		},
		{
			MethodName: "LExpire",
			Handler:    _Rosedb_LExpire_Handler,
		},
		{
			MethodName: "LTTL",
			Handler:    _Rosedb_LTTL_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Rosedb_Set_Handler,
		},
		{
			MethodName: "SetNx",
			Handler:    _Rosedb_SetNx_Handler,
		},
		{
			MethodName: "SetEx",
			Handler:    _Rosedb_SetEx_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Rosedb_Get_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _Rosedb_GetSet_Handler,
		},
		{
			MethodName: "MSet",
			Handler:    _Rosedb_MSet_Handler,
		},
		{
			MethodName: "MGet",
			Handler:    _Rosedb_MGet_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Rosedb_Append_Handler,
		},
		{
			MethodName: "StrExists",
			Handler:    _Rosedb_StrExists_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Rosedb_Remove_Handler,
		},
		{
			MethodName: "PrefixScan",
			Handler:    _Rosedb_PrefixScan_Handler,
		},
		{
			MethodName: "RangeScan",
			Handler:    _Rosedb_RangeScan_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _Rosedb_Expire_Handler,
		},
		{
			MethodName: "Persist",
			Handler:    _Rosedb_Persist_Handler,
		},
		{
			MethodName: "TTl",
			Handler:    _Rosedb_TTl_Handler,
		},
		{
			MethodName: "ZAdd",
			Handler:    _Rosedb_ZAdd_Handler,
		},
		{
			MethodName: "ZScore",
			Handler:    _Rosedb_ZScore_Handler,
		},
		{
			MethodName: "ZRank",
			Handler:    _Rosedb_ZRank_Handler,
		},
		{
			MethodName: "ZCard",
			Handler:    _Rosedb_ZCard_Handler,
		},
		{
			MethodName: "ZRevRank",
			Handler:    _Rosedb_ZRevRank_Handler,
		},
		{
			MethodName: "ZIncrBy",
			Handler:    _Rosedb_ZIncrBy_Handler,
		},
		{
			MethodName: "ZRange",
			Handler:    _Rosedb_ZRange_Handler,
		},
		{
			MethodName: "ZRangeWithScores",
			Handler:    _Rosedb_ZRangeWithScores_Handler,
		},
		{
			MethodName: "ZRem",
			Handler:    _Rosedb_ZRem_Handler,
		},
		{
			MethodName: "ZRevRange",
			Handler:    _Rosedb_ZRevRange_Handler,
		},
		{
			MethodName: "ZRevRangeWithScores",
			Handler:    _Rosedb_ZRevRangeWithScores_Handler,
		},
		{
			MethodName: "ZGetByRank",
			Handler:    _Rosedb_ZGetByRank_Handler,
		},
		{
			MethodName: "ZRevGetByRank",
			Handler:    _Rosedb_ZRevGetByRank_Handler,
		},
		{
			MethodName: "ScoreRange",
			Handler:    _Rosedb_ScoreRange_Handler,
		},
		{
			MethodName: "ZRevScoreRange",
			Handler:    _Rosedb_ZRevScoreRange_Handler,
		},
		{
			MethodName: "ZKeyExists",
			Handler:    _Rosedb_ZKeyExists_Handler,
		},
		{
			MethodName: "ZClear",
			Handler:    _Rosedb_ZClear_Handler,
		},
		{
			MethodName: "ZExpire",
			Handler:    _Rosedb_ZExpire_Handler,
		},
		{
			MethodName: "ZTTL",
			Handler:    _Rosedb_ZTTL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rosedb.proto",
}
